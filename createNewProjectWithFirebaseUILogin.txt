
a) Se genera el proyecto 
ng new nombreProyecto
 
b) Dentro de la carpeta generada del proyecto
 
npm install firebase angularfire2 firebaseui --save

c) Este no esta claro si es necesario pero si se recibe un error como shared_promise.js Module not found: Error: Can't resolve 'promise-polyfill' 
instalarlo entonces

npm install promise-polyfill --save-exact
 
d) 
npm cache clean -f
 

e) 
Se incluye el css para el boton de login de google en el header del archivo index.html
 
<link type="text/css" rel="stylesheet" href="https://cdn.firebase.com/libs/firebaseui/2.0.0/firebaseui.css" />

f) se crearon cada uno de los componentes en la carpeta auth
ng g c auth/signIn --spec false
ng g c auth/signOut --spec false
ng g s auth/SessionManager --spec false

g) se crearon los componentes principales

ng g c Header --spec false
ng g c Help --spec false
ng g c Home --spec false

h) en el archivo app.module.ts
 se integran los routes en los imports
import { Routes, RouterModule } from "@angular/router"
import { AngularFireModule } from "angularfire2/angularfire2";
import { AngularFireDatabaseModule } from "angularfire2/database";


-----
const appRoutes: Routes = [
 {path: '' , redirectTo : 'signIn' , pathMatch: 'full'}
 ,{path: 'signIn', component: SignInComponent}    
]
--
@NgModule({..
imports:[..
RouterModule.forRoot(appRoutes)
],
Providers:[..]
bootstrap: [AppComponent]
})


 se declara como provider el sessionManagerService
@NgModule({
declarations:[..],
imports:[..],
Providers:[SessionManagerService]
bootstrap: [AppComponent]
})

Se integra la inicializacion de firebase

@NgModule({
declarations:[..],
Imports:[..
AngularFireModule.initializeApp(environment.FBConfig),
AngularFireDatabaseModule,
..],
Providers:[SessionManagerService]
bootstrap: [AppComponent]
})




Componente SignIn
html
<div id="firebaseui-auth-container"></div>
<div id="loader">Loading...</div>

ts
import { Component, OnInit, AfterViewInit } from '@angular/core';
import * as firebase from 'firebase'
import * as firebaseui from 'firebaseui'
import { Router } from "@angular/router";


@Component({
 selector: 'app-sign-in',
 templateUrl: './sign-in.component.html',
 styleUrls: ['./sign-in.component.css']
})
export class SignInComponent implements OnInit, AfterViewInit {
 uiConfig : any
 ui: any

 constructor(private router: Router) {

   firebase.auth().signOut(); // en caso de que este logueado se desloguea

   console.log("ejecutando constructor")

   let that = this

   // FirebaseUI config.
   this.uiConfig = {
     callbacks: {
       signInSuccess: function (currentUser, credential, redirectUrl) {
         // Do something.
         // Return type determines whether we continue the redirect automatically
         // or whether we leave that to developer to handle.
         console.log("currentUser", currentUser)
         console.log("credential", credential)
         console.log("redirectUrl", redirectUrl)
         //that.router.navigate(['home']) ES NECESARIO?  EL LISTENER QUE ESTA EN APP COMPONENT SERA SUFICIENTE?
         return true;
       },
       uiShown: function () {
         // The widget is rendered.
         // Hide the loader.
         //This callback is triggered the first time the widget UI is rendered. This is useful for cases where the application should display a custom loader before FirebaseUI is displayed.
         document.getElementById('loader').style.display = 'none';
       }
     },
     credentialHelper: firebaseui.auth.CredentialHelper.ACCOUNT_CHOOSER_COM,
     // Query parameter name for mode.
     queryParameterForWidgetMode: 'mode',
     // Query parameter name for sign in success url.
     queryParameterForSignInSuccessUrl: 'signInSuccessUrl',
     // Will use popup for IDP Providers sign-in flow instead of the default, redirect.
     signInFlow: 'popup',
     signInSuccessUrl: 'home',  //mi ruta en routes
     signInOptions: [
       // Leave the lines as is for the providers you want to offer your users.
       firebase.auth.GoogleAuthProvider.PROVIDER_ID
       // firebase.auth.FacebookAuthProvider.PROVIDER_ID,
       // firebase.auth.TwitterAuthProvider.PROVIDER_ID,
       // {
       //   provider: firebase.auth.EmailAuthProvider.PROVIDER_ID,
       //   // Whether the display name should be displayed in the Sign Up page.
       //   requireDisplayName: true
       // },
       // {
       //   provider: firebase.auth.PhoneAuthProvider.PROVIDER_ID,
       //   // Invisible reCAPTCHA with image challenge and bottom left badge.
       //   recaptchaParameters: {
       //     type: 'image',
       //     size: 'invisible',
       //     badge: 'bottomleft'
       //   }
       // }
     ],
     // Terms of service url.
     tosUrl: '<your-tos-url>'
   };

 } 
  
 ngAfterViewInit(): void {
   console.log("ejecutando ngAfterViewInit")   
   this.ui.start('#firebaseui-auth-container', this.uiConfig);
 }


 ngOnInit(): void {
   console.log("ejecutando oninit")
   this.ui = new firebaseui.auth.AuthUI(firebase.auth());
   // The start method will wait until the DOM is loaded.  
 }


}

Componente SignOut

import { Component, OnInit } from '@angular/core';
import * as firebase from 'firebase'

@Component({
 selector: 'app-sign-out',
 templateUrl: './sign-out.component.html',
 styleUrls: ['./sign-out.component.css']
})
export class SignOutComponent implements OnInit {

 constructor() {
       firebase.auth().signOut();
  }

 ngOnInit() {
 }

}


servicio SessionManagerService

import { Injectable } from '@angular/core';
import { Subject } from "rxjs/Subject";
import { userProfile } from '../../environments/environment'


@Injectable()
export class SessionManagerService {

 userStatus : Subject<userProfile>

 constructor() {
   this.userStatus = new Subject()
  }
}
Componente Header

<nav class="navbar navbar-default">
   <div class="container-fluid">
       <div class="navbar-header">
           <a href="#" class="navbar-brand">DASH Exchange for cash</a>
       </div>       
       <div class="collapse navbar-collapse">
           <ul class="nav navbar-nav" *ngIf="status" >
               <li routerLinkActive="active"
                   [routerLinkActiveOptions] = {exact:true}     ><a routerLink="/">Home</a></li>
               <li routerLinkActive="active"><a routerLink="d2c">Dash 4 Cash</a></li>
               <li routerLinkActive="active"><a  routerLink="c2d">Cash 4 Dash</a></li>               
           </ul>
           <ul class="nav navbar-nav navbar-right">
               <li *ngIf="!status"> <a routerLink="signIn">Sign In</a></li>
               <li *ngIf="status"> <a routerLink="signOut">Sign Out</a></li>
               <li> <a routerLink="help">help</a></li>
           </ul>
       </div>

   </div>
</nav>


import { Component, OnInit } from '@angular/core';

import { SessionManagerService } from "../auth/session-manager.service";
import { userProfile } from "environments/environment";

@Component({
 selector: 'app-header',
 templateUrl: './header.component.html',
 styleUrls: ['./header.component.css']
})
export class HeaderComponent implements OnInit {

 name : string
 email : string
 status : boolean

 constructor(private sessionService : SessionManagerService) { }

 ngOnInit() {
       this.sessionService.userStatus.subscribe(
         ( data : userProfile) => {
           console.log("este es el header recibiendo actualizacion", data)
           this.name = data.name
           this.email = data.email
           this.status = data.status
         }
       )
 }

}



  AppComponent  AQUI SE INICIALIZA FIREBASE

<app-header></app-header>
<router-outlet></router-outlet>



import { Component, OnInit } from '@angular/core';
import { Router } from '@angular/router'

import * as firebase from 'firebase'

import { SessionManagerService } from "./auth/session-manager.service";

import { userProfile } from '../environments/environment'
import { firebaseConfig } from '../environments/environment'


@Component({
 selector: 'app-root',
 templateUrl: './app.component.html',
 styleUrls: ['./app.component.css']
})
export class AppComponent implements OnInit{

 profile : userProfile


  constructor(private router: Router, private sessionService : SessionManagerService) {
  }


 ngOnInit(): void {

   firebase.initializeApp(firebaseConfig);

   firebase.auth().onAuthStateChanged(() => {

     console.log("APP COMPONENT - onAuthStateChanged")
     console.log(firebase.auth().currentUser)

     if (firebase.auth().currentUser) {
       console.log("APP COMPONENT - Nos vamos al home CON OPCIONES DE MENU DE C4D Y D4C porque ya estas logueado")
       this.profile = {
               name: firebase.auth().currentUser.displayName
               , email: firebase.auth().currentUser.email
               , status: true
             }
     } else {
       console.log("APP COMPONENT - Nos vamos a HOME PERO SIN OPCIONES DE C4D O D4C")
       this.profile = {
               name:  ""
               , email: ""
               , status: false
             }
     }

    this.sessionService.userStatus.next(this.profile);
     this.router.navigate(['home'])
   })
 }

}

App.module.ts

import { BrowserModule } from '@angular/platform-browser';
import { NgModule } from '@angular/core';
import { FormsModule } from '@angular/forms';
import { HttpModule } from '@angular/http';
import { Routes, RouterModule } from "@angular/router"

import { AppComponent } from './app.component';
import { HeaderComponent } from './header/header.component';
import { HomeComponent } from './home/home.component';
import { Cash2DashComponent } from './cash2-dash/cash2-dash.component';
import { Dash2CashComponent } from './dash2-cash/dash2-cash.component';
import { SignInComponent } from './auth/sign-in/sign-in.component';
import { SignOutComponent } from './auth/sign-out/sign-out.component';
import { SessionManagerService } from "./auth/session-manager.service";
import { HelpComponent } from './help/help.component';


const appRoutes: Routes = [
  {path: '' , redirectTo : 'home' , pathMatch: 'full'}
  ,{path: 'home', component: HomeComponent}
  ,{path: 'd2c', component: Dash2CashComponent}
  ,{path: 'c2d', component: Cash2DashComponent}
  ,{path: 'signIn', component: SignInComponent}     
  ,{path: 'signOut', component: SignOutComponent}     
  ,{path: 'help', component: HelpComponent}     
]

@NgModule({
 declarations: [
   AppComponent,
   HeaderComponent,
   HomeComponent,
   Cash2DashComponent,
   Dash2CashComponent,
   SignInComponent,
   SignOutComponent,
   HelpComponent
 ],
 imports: [
   BrowserModule,
   FormsModule,
   HttpModule,
   RouterModule.forRoot(appRoutes)
 ],
 providers: [SessionManagerService],
 bootstrap: [AppComponent]
})
export class AppModule { }







